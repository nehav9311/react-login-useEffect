Consider a dummy login screen(which has no authentication), we can login as long as we have a valid email and the password is at least seven characters long.

Problem 1:
We can send a HTTP request to backend server, consider that no such server exists.

When we login using the credentials, if we refresh the page we'll lose login status. If we had a server, once we login, we send request to backend and get some log-in data, like some token that identifies the user as authenticated. But we should make sure the user authenticated status is there once we reload the page.
If we use state to make the login status of user, when we reload the page, the entire application restarts and all the varibales from last execution are lost. Since we lose all the data, we can insted store them somewhere where it stays on reload. We should also make sure that when the application starts, we check if the data exists. If it does exist, we log the user in automatically so the user doesnt have to re-enter the details.
We can use useEffect here.

In loginhandler we store the data collected in browser storage. The browser has many storages, we can use cookies or local storage here because it's easier to work with.
Local storage is a storage mechanism built into the browser which is totally independent of react. "localStorage" is a global object which is available in the browser. It is used with setItem, we can then give the item an identifier of our choice, should be a string. It should have a second argument which should be a string. We can add the storage in a function, because it is the function that executes only when the user clicks a button, this is rare and hence we can use this as a use case.
Consider scenario 1 where the app restarts because the user left the page and comes back or because we reload the page. Then in localStorage we can check if we have the key and value pair. When the app restarts, the app component runs again and therefore we can reach the localStorage at the top of component function using "localStorage.getItem" and search for our key, which will return the items stored in there. 
If we don't useEffect in this process, we could create an infinite loop. When we reload the page, we dont have to enter the details again. Once we click logout, the localStorage data is cleared.

Problem 2: 
In Login.js: Use useEffect to have one place where we mark the form as valid or invalid with one logic which should trigger whenever either the email or password changed.
We check if the entered email has '@' and entered password is longer than 6 characters. Insted of using 2 different form validations add them in a single useEffect.


Problem 3:
In Login.js: Consider a scenario where you listen to every keystroke and save that entered data while taking user input and we then want to trigger another action in response to that, we have to check and update form validity in response keystroke in email or password field. This can also be called a side effect. It's a side effect of user entering some data. 
This side effect can be solved by using useEffect.

Problem 4:
In Login.js: Sometimes we might have an effect that needs to do some cleanup work. Lets say you are executing a useEffect function on every keystroke, for example while entering username and password, we are updating some state which triggers another function component execution and React again needs to check if it has to change something in the DOM. Consider a scenario where we do something complex like send a http request to backend where we check if a username is already in use. We don't want to do that with every keystroke, because if we do it means we are going to be sending a lot of requests which causes unnecessary network traffic. We also have to avoid state updating on every keystroke.
Insted what we can do is collect a certain amount of keystrokes or simply wait for a pause after a certain time duration after a keystroke, only if the pause is long enough we go ahead and do our thing.
For example, while the user is actively typing we might not want to check if it's a valid email address. We care about when the user stops typing. Lets consider the user types and then stops for aboubt 500 milliseconds or longer, then we can assume the user seems to be done and check if it's valid. The same can be done for password. This technique is called debouncing. We debounce the user input. We want to make sure we are not doing something with it on every keystroke but only when user made a pause during typing. Debouncing can be implemented with useEffect. We can use 'setTimout' which is a function built into the browser, to wait for ex. 500 milliseconds until we execute some function. We can check out form validity inside this function. 
The trick is we save the timer and for the next keystroke we clear it, so that we only have 1 ongoing timer at a time. As long as the user keeps on typing we always clear all other timers, therefore we'll only have one timer that completes and that completes after 500 milliseconds, which is the delay the user has to issue a new keystroke to clear this timer. In the userEffect we can return a function, for example an anonymous arrow function which is called a cleanup function. This will run a cleanup process before useEffect executes the function next time. Whenever useEffect function runs, before it runs except for the very first time when it runs, this cleanup function will run. In addition the cleanup function will run whenever the component we're specifying the effect in unmounts from the DOM(whenever the component is reused). The cleanup function runs before every new side effect function execution and before the component is removed. It does not run before the first side effect function execution. But thereafter it'll run before every next side effect function execution.
We also use cleartimer to clear the last timer before we set a new one.
The code in setFormIsValid ran only once for all the keystrokes. If we would be sending a http request here, we would now send only 1 request insted of a dozen of HTTP requests. 
